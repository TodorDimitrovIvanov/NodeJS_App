
	// Test custom blocks
/*
	var bm = editor.BlockManager;
  bm.get('b1').set({
    content: {
      classes: ['blk-row'],
      droppable: ['.blk-cell'],
      components: [{
        classes: ['blk-cell', 'blk1'],
      }]
    }
  });
  bm.get('b2').set({
		content: '<div class="blk-row" data-gjs-droppable=".blk-cell" data-gjs-draggable="*:not(#wrapper)"><div data-gjs-draggable=".blk-row" class="blk-cell blk2"></div><div data-gjs-draggable=".blk-row" class="blk-cell blk2"></div></div>',
  });
  bm.get('b3').set({
    content: {
      classes: ['blk-row'],
      droppable: ['.blk-cell'],
      components: [{
        classes: ['blk-cell', 'blk3'],
      },{
        classes: ['blk-cell', 'blk3'],
      },{
        classes: ['blk-cell', 'blk3'],
      }]
    }
  });
  bm.get('b4').set({
    content: {
      classes: ['blk-row'],
      droppable: ['.blk-cell'],
      components: [{
        classes: ['blk-cell', 'blk37l'],
      },{
        classes: ['blk-cell', 'blk37r'],
      }]
    }
  });
  bm.get('map').set({
    content: {
      type: 'map',
      draggable: ['*:not(#wrapper)'],
      style: {height: '350px'}
    },
  });
*/
		/*
		// Test toolbar commands
		var cmd = editor.Commands;
		cmd.add('tlb-delete', {
			run: function(ed){
				var sel = ed.getSelected();
				if(!sel)
					return;
				sel.destroy();
				ed.Canvas.getToolbarEl().style.display = 'none';
			},
		});

		cmd.add('tlb-clone', {
			run: function(ed){
				var sel = ed.getSelected();
				var collection = sel.collection;
				var index = collection.indexOf(sel);
				collection.add(sel.clone(), {at: index + 1});
			},
		});

		cmd.add('tlb-move', {
			run: function(ed){
				var sel = ed.getSelected();
				ed.editor.stopDefault();
				var cmdMove = cmd.get('move-comp');
				cmdMove.onEndMoveFromModel = function() {
					ed.editor.runDefault();
				};
				cmdMove.initSorterFromModel(sel);
				ed.Canvas.getToolbarEl().style.display = 'none';
			},
		});
		*/



/*   MENU   */
    script: function () {
      var stringCollapse = 'gjs-collapse';
      var clickEvent = 'click';
      var style = 'style';
      var height = 'height';

      var supportTransitions = 1;
      var transitionEndEvent = 'transitionend';

      var getOuterHeight = function (child) {
        var childStyle = child && (child.currentStyle || window.getComputedStyle(child)),
          btp = /px/.test(childStyle.borderTopWidth) ? Math.round(childStyle.borderTopWidth.replace('px','')) : 0,
          btb = /px/.test(childStyle.borderBottomWidth) ? Math.round(childStyle.borderBottomWidth.replace('px','')) : 0,
          mtp = /px/.test(childStyle.marginTop) ? Math.round(childStyle.marginTop.replace('px','')) : 0,
          mbp = /px/.test(childStyle.marginBottom) ? Math.round(childStyle.marginBottom.replace('px','')) : 0;
        return child[clientHeight] + parseInt( btp ) + parseInt( btb ) + parseInt( mtp ) + parseInt( mbp );
      };

      var getMaxHeight = function(parent) { // get collapse trueHeight and border
        var parentHeight = 0;
        for (var k = 0, ll = parent.children[length]; k < ll; k++) {
          parentHeight += getOuterHeight(parent.children[k]);
        }
        return parentHeight;
      };

      var getElHeight = function(el) {
        var style = window.getComputedStyle(el);
        var elDisplay = style.display;
        var elPos = style.position;
        var elVis = style.visibility;
        var currentHeight = style.height;
        var currentMaxHeight = style.maxHeight;
        var elMaxHeight = style.maxHeight.replace('px', '').replace('%', '');

        if (elDisplay !== 'none' && elMaxHeight !== '0') {
          return el.offsetHeight;
        }

        el.style.height = 'auto';
        el.style.display = 'block';
        el.style.position = 'absolute';
        el.style.visibility = 'hidden';
        //el.style.maxHeight = 'auto';
        var height = el.offsetHeight;
        el.style.height = '';
        el.style.display = '';
        el.style.position = '';
        el.style.visibility = '';
        //el.style.maxHeight = currentMaxHeight;

        return height;
      };

      on = function (element, event, handler) {
        element.addEventListener(event, handler, false);
      };
      off = function(element, event, handler) {
        element.removeEventListener(event, handler, false);
      };
      one = function (element, event, handler) { // one since 2.0.4
        on(element, event, function handlerWrapper(e){
          handler(e);
          off(element, event, handlerWrapper);
        });
      };

      var emulateTransitionEnd = function(element, handler)  {
        if (supportTransitions) {
          one(element, transitionEndEvent, function(e){ handler(e); });
        } else {
          handler();
        }
      };

      var Collapse = function(element, options ) {
          console.log(element);
          options = options || {};

          // event targets and constants
          var accordion = null;
          var collapse = null;
          var self = this;
          var isAnimating = false;
          var accordionData = element.getAttribute('data-parent');
          var showen = 0;

          // component strings
          var component = 'collapse';
          var collapsed = 'collapsed';

          var inClass = 'in'; // display: block;
          var collapsing = 'collapsing'; // 'max-height 0.25s ease-in-out';

          // private methods
          var openAction = function(collapseElement) {
            isAnimating = true;
            var maxHeight = getElHeight(collapseElement);
            collapseElement.style.transition = 'height 0.25s ease-in-out';
            //addClass(collapseElement, collapsing);
            //addClass(collapseElement, inClass);

            setTimeout(function() {
              collapseElement.style.display = 'block';
              collapseElement[style][height] = maxHeight + 'px';
              console.log('openAction', maxHeight, 'elH', collapseElement[style][height]);

              (function() {
                emulateTransitionEnd(collapseElement, function() {
                  console.log('Opening finished');
                  showen = 1;
                  isAnimating = false;
                  //collapseElement[setAttribute](ariaExpanded,'true');
                  //removeClass(collapseElement, collapsing);
                  collapseElement.style.transition = '';

                  collapseElement[style][height] = '';
                });
              }());
            }, 20);
          },

          closeAction = function(collapseElement) {
            isAnimating = true;
            collapseElement[style][height] = getMaxHeight(collapseElement) + 'px';
            setTimeout(function() {
              //addClass(collapseElement, collapsing);
              collapseElement.style.transition = 'height 0.25s ease-in-out';
              collapseElement[style][height] = '0px';

              (function(){
                emulateTransitionEnd(collapseElement, function() {
                  console.log('Closing finished');
                  showen = 0;
                  isAnimating = false;
                  //collapseElement[setAttribute](ariaExpanded,'false');

                  //removeClass(collapseElement, collapsing);
                  collapseElement.style.transition = '';

                  //removeClass(collapseElement, inClass);
                  collapseElement.style.display = '';

                  collapseElement[style][height] = '';
                });
              }());
            }, 20);
          },

          getTarget = function() {
            var navParent = element.closest('[data-gjs=nav]');
            return navParent.querySelector('[data-gjs=nav-items]');
            /*
            var href = element.href && element[getAttribute]('href'),
              parent = element[getAttribute](dataTarget),
              id = href || ( parent && targetsReg.test(parent) ) && parent;
            return id && queryElement(id);
            */
          };

        // public methods
        this.toggle = function(e) {
          e.preventDefault();
          if (isAnimating) {
            return;
          }
          //if (!hasClass(collapse, inClass)) {
          if (!showen) {
            console.log('Show', 'Height', collapse.style.height, collapse);
            self.show();
          } else {
            console.log('Hide', 'Height', collapse.style.height);
            self.hide();
          }
        };
        this.hide = function() {
          closeAction(collapse);
          //addClass(element,collapsed);
        };
        this.show = function() {
          openAction(collapse);
          //removeClass(element,collapsed);

          /*
          if ( accordion !== null ) {
            var activeCollapses = getElementsByClassName(accordion,component+' '+inClass),
                allToggles = accordion[querySelectorAll]('['+dataToggle+'="'+component+'"]'),
                correspondingCollapse;
            for (var i=0, al=activeCollapses[length]; i<al; i++) {
              if ( activeCollapses[i] !== collapse ) { closeAction(activeCollapses[i]); }
            }
            for (var u=0, atl=allToggles[length]; u<atl; u++) {
              correspondingCollapse = allToggles[u][getAttribute](dataTarget) || allToggles[u].href;
              if ( correspondingCollapse.split('#')[1] !== collapse.id ) { addClass(allToggles[u],collapsed); }
              else { removeClass(allToggles[u],collapsed); }
            }
          }
          */
        };

        // Prevent double listeners
        if ( !(stringCollapse in element ) ) {
          element.addEventListener(clickEvent, this.toggle);
        }

        collapse = getTarget();
        //accordion = queryElement(options.parent) || accordionData && getClosest(element, accordionData);
        element[stringCollapse] = this;
      };

      var collObj = new Collapse(this);
      console.log('Inited collObj');
    },
